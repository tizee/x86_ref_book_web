(window.webpackJsonp=window.webpackJsonp||[]).push([[317],{671:function(t,a,n){"use strict";n.r(a);var e=n(42),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"subsd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subsd"}},[t._v("#")]),t._v(" SUBSD")]),t._v(" "),n("h2",{attrs:{id:"subtract-scalar-double-precision-floating-point-values"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#subtract-scalar-double-precision-floating-point-values"}},[t._v("#")]),t._v(" Subtract Scalar Double-Precision Floating-Point Values")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Opcode")]),t._v(" "),n("th",[t._v("Mnemonic")]),t._v(" "),n("th",[t._v("Description")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("F2 0F 5C /r")]),t._v(" "),n("td",[t._v("SUBSD xmm1, xmm2/m64")]),t._v(" "),n("td",[t._v("Subtract the low double-precision floating-point value in xmm2/mem64 from xmm1.")])])])]),t._v(" "),n("h2",{attrs:{id:"description"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),n("p",[t._v("Subtracts the low double-precision floating-point value in the source operand (second operand) from the low double-precision floating-point value in the destination operand (first operand), and stores the double-precision floating-point result in the destination operand. The source operand can be an XMM register or a 64-bit memory location. The destination operand is an XMM register. The high quadword of the destination operand remains unchanged. See Figure 11-4 in the IA-32 Intel Architecture Software Developer's Manual, Volume 1 for an illustration of a scalar double-precision floating-point operation.")]),t._v(" "),n("h2",{attrs:{id:"operation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#operation"}},[t._v("#")]),t._v(" Operation")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("Destination"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".63")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Destination"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".63")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".63")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Destination[64..127] remains unchanged")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("table",[n("thead",[n("tr",[n("th",[t._v("Instruction")]),t._v(" "),n("th",[t._v("Latency")]),t._v(" "),n("th",[t._v("Throughput")]),t._v(" "),n("th",[t._v("Execution Unit")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("CPUID")]),t._v(" "),n("td",[t._v("0F3n/0F2n/069n")]),t._v(" "),n("td",[t._v("0F3n/0F2n/069n")]),t._v(" "),n("td",[t._v("0F2n")])]),t._v(" "),n("tr",[n("td",[t._v("SUBSD xmm, xmm")]),t._v(" "),n("td",[t._v("5/4/3")]),t._v(" "),n("td",[t._v("2/2/1")]),t._v(" "),n("td",[t._v("FP_ADD")])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);