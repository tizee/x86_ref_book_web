(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{384:function(t,e,s){"use strict";s.r(e);var a=s(42),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"bsr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bsr"}},[t._v("#")]),t._v(" BSR")]),t._v(" "),s("h2",{attrs:{id:"bit-scan-reverse"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bit-scan-reverse"}},[t._v("#")]),t._v(" Bit Scan Reverse")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Opcode")]),t._v(" "),s("th",[t._v("Mnemonic")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0F BD")]),t._v(" "),s("td",[t._v("BSR r16, r/m16")]),t._v(" "),s("td",[t._v("Bit scan reverse on r/m16")])]),t._v(" "),s("tr",[s("td",[t._v("0F BD")]),t._v(" "),s("td",[t._v("BSR r32, r/m32")]),t._v(" "),s("td",[t._v("Bit scan reverse on r/m32")])])])]),t._v(" "),s("h2",{attrs:{id:"description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),s("p",[t._v("Searches the source operand (second operand) for the most significant set bit (1 bit). If a most significant 1 bit is found, its bit index is stored in the destination operand (first operand). The source operand can be a register or a memory location; the destination operand is a register. The bit index is an unsigned offset from bit 0 of the source operand. If the content source operand is 0, the content of the destination operand is undefined.")]),t._v(" "),s("h2",{attrs:{id:"operation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#operation"}},[t._v("#")]),t._v(" Operation")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Source "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tZF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tDestination "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Undefined"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tZF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tTemporary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" OperandSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Temporary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tTemporary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Temporary "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tDestination "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Temporary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("h2",{attrs:{id:"flags-affected"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flags-affected"}},[t._v("#")]),t._v(" Flags affected")]),t._v(" "),s("p",[t._v("The ZF flag is set to 1 if all the source operand is 0; otherwise, the ZF flag is cleared. The CF, OF, SF, AF, and PF, flags are undefined.")]),t._v(" "),s("h2",{attrs:{id:"protected-mode-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protected-mode-exceptions"}},[t._v("#")]),t._v(" Protected Mode Exceptions")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("a",{attrs:{href:""}})]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("#GP(0)")]),t._v(" "),s("td",[t._v("If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit. If the DS, ES, FS, or GS register contains a null segment selector.")])]),t._v(" "),s("tr",[s("td",[t._v("#GP(0)")]),t._v(" "),s("td",[t._v("If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit. If the DS, ES, FS, or GS register contains a null segment selector.")])]),t._v(" "),s("tr",[s("td",[t._v("#SS(0)")]),t._v(" "),s("td",[t._v("If a memory operand effective address is outside the SS segment limit.")])]),t._v(" "),s("tr",[s("td",[t._v("#PF(fault-code)")]),t._v(" "),s("td",[t._v("If a page fault occurs.")])])])]),t._v(" "),s("h2",{attrs:{id:"real-address-mode-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#real-address-mode-exceptions"}},[t._v("#")]),t._v(" Real-Address Mode Exceptions")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("a",{attrs:{href:""}})]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("#GP")]),t._v(" "),s("td",[t._v("If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.")])]),t._v(" "),s("tr",[s("td",[t._v("#GP")]),t._v(" "),s("td",[t._v("If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.")])])])]),t._v(" "),s("h2",{attrs:{id:"virtual-8086-mode-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#virtual-8086-mode-exceptions"}},[t._v("#")]),t._v(" Virtual-8086 Mode Exceptions")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("a",{attrs:{href:""}})]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("#GP(0)")]),t._v(" "),s("td",[t._v("If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.")])]),t._v(" "),s("tr",[s("td",[t._v("#GP(0)")]),t._v(" "),s("td",[t._v("If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.")])]),t._v(" "),s("tr",[s("td",[t._v("#SS(0)")]),t._v(" "),s("td",[t._v("If a memory operand effective address is outside the SS segment limit.")])]),t._v(" "),s("tr",[s("td",[t._v("#PF(fault-code)")]),t._v(" "),s("td",[t._v("If a page fault occurs.")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Instruction")]),t._v(" "),s("th",[t._v("Latency")]),t._v(" "),s("th",[t._v("Throughput")]),t._v(" "),s("th",[t._v("Execution Unit")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("CPUID")]),t._v(" "),s("td",[t._v("0F3n/0F2n")]),t._v(" "),s("td",[t._v("0F3n/0F2n")]),t._v(" "),s("td",[t._v("0F2n")])]),t._v(" "),s("tr",[s("td",[t._v("BSF/BSR")]),t._v(" "),s("td",[t._v("16/8")]),t._v(" "),s("td",[t._v("2/4")]),t._v(" "),s("td",[t._v("-")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);