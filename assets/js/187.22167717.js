(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{541:function(t,e,s){"use strict";s.r(e);var a=s(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"movd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#movd"}},[t._v("#")]),t._v(" MOVD")]),t._v(" "),s("h2",{attrs:{id:"move-doubleword"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#move-doubleword"}},[t._v("#")]),t._v(" Move Doubleword")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Opcode")]),t._v(" "),s("th",[t._v("Mnemonic")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0F 6E /r")]),t._v(" "),s("td",[t._v("MOVD mm, r/m32")]),t._v(" "),s("td",[t._v("Move doubleword from r/m32 to mm.")])]),t._v(" "),s("tr",[s("td",[t._v("0F 7E /r")]),t._v(" "),s("td",[t._v("MOVD r/m32, mm")]),t._v(" "),s("td",[t._v("Move doubleword from mm to r/m32.")])]),t._v(" "),s("tr",[s("td",[t._v("66 0F 6E /r")]),t._v(" "),s("td",[t._v("MOVD xmm, r/m32")]),t._v(" "),s("td",[t._v("Move doubleword from r/m32 to xmm.")])]),t._v(" "),s("tr",[s("td",[t._v("66 0F 7E /r")]),t._v(" "),s("td",[t._v("MOVD r/m32, xmm")]),t._v(" "),s("td",[t._v("Move doubleword from xmm register to r/m32.")])])])]),t._v(" "),s("h2",{attrs:{id:"description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),s("p",[t._v("Copies a doubleword from the source operand (second operand) to the destination operand (first operand). The source and destination operands can be general-purpose registers, MMX technology registers, XMM registers, or 32-bit memory locations. This instruction can be used to move a doubleword to and from the low doubleword of an MMX technology register and a general-purpose register or a 32-bit memory location, or to and from the low doubleword of an XMM register and a general-purpose register or a 32-bit memory location. The instruction cannot be used to transfer data between MMX technology registers, between XMM registers, between general-purpose registers, or between memory locations.")]),t._v(" "),s("p",[t._v("When the destination operand is an MMX technology register, the source operand is written to the low doubleword of the register, and the register is zero-extended to 64 bits. When the destination operand is an XMM register, the source operand is written to the low doubleword of the register, and the register is zero-extended to 128 bits.")]),t._v(" "),s("h2",{attrs:{id:"operation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#operation"}},[t._v("#")]),t._v(" Operation")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//MOVD instruction when destination operand is MMX technology register:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsMMXRegister")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Destination"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tDestination"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".31")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tDestination"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32.")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".63")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//MOVD instruction when destination operand is XMM register:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsXMMRegister")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Destination"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tDestination"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".31")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tDestination"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32.")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".127")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//MOVD instruction when source operand is MMX technology or XMM register:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" Destination "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".31")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("h2",{attrs:{id:"flags-affected"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flags-affected"}},[t._v("#")]),t._v(" Flags affected")]),t._v(" "),s("p",[t._v("None.")]),t._v(" "),s("h2",{attrs:{id:"simd-floating-point-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simd-floating-point-exceptions"}},[t._v("#")]),t._v(" SIMD Floating-Point Exceptions")]),t._v(" "),s("p",[t._v("None.")]),t._v(" "),s("h2",{attrs:{id:"protected-mode-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protected-mode-exceptions"}},[t._v("#")]),t._v(" Protected Mode Exceptions")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("a",{attrs:{href:""}})]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("#GP(0)")]),t._v(" "),s("td",[t._v("If the destination operand is in a non-writable segment. If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.")])]),t._v(" "),s("tr",[s("td",[t._v("#GP(0)")]),t._v(" "),s("td",[t._v("If the destination operand is in a non-writable segment. If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.")])]),t._v(" "),s("tr",[s("td",[t._v("#SS(0)")]),t._v(" "),s("td",[t._v("If a memory operand effective address is outside the SS segment limit.")])]),t._v(" "),s("tr",[s("td",[t._v("#UD")]),t._v(" "),s("td",[t._v("If EM in CR0 is set. 128-bit operations will generate #UD only if OSFXSR in CR4 is 0. Execution of 128-bit instructions on a non-SSE2 capable processor (one that is MMX technology capable) will result in the instruction operating on the mm registers, not #UD.")])]),t._v(" "),s("tr",[s("td",[t._v("#NM")]),t._v(" "),s("td",[t._v("If TS in CR0 is set.")])]),t._v(" "),s("tr",[s("td",[t._v("#MF")]),t._v(" "),s("td",[t._v("(MMX technology register operations only.) If there is a pending FPU exception.")])]),t._v(" "),s("tr",[s("td",[t._v("#PF(fault-code)")]),t._v(" "),s("td",[t._v("If a page fault occurs.")])])])]),t._v(" "),s("h2",{attrs:{id:"real-address-mode-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#real-address-mode-exceptions"}},[t._v("#")]),t._v(" Real-Address Mode Exceptions")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("a",{attrs:{href:""}})]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("#GP")]),t._v(" "),s("td",[t._v("If any part of the operand lies outside of the effective address space from 0 to FFFFH.")])]),t._v(" "),s("tr",[s("td",[t._v("#GP")]),t._v(" "),s("td",[t._v("If any part of the operand lies outside of the effective address space from 0 to FFFFH.")])]),t._v(" "),s("tr",[s("td",[t._v("#UD")]),t._v(" "),s("td",[t._v("If EM in CR0 is set. 128-bit operations will generate #UD only if OSFXSR in CR4 is 0. Execution of 128-bit instructions on a non-SSE2 capable processor (one that is MMX technology capable) will result in the instruction operating on the mm registers, not #UD.")])]),t._v(" "),s("tr",[s("td",[t._v("#NM")]),t._v(" "),s("td",[t._v("If TS in CR0 is set.")])])])]),t._v(" "),s("h2",{attrs:{id:"virtual-8086-mode-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#virtual-8086-mode-exceptions"}},[t._v("#")]),t._v(" Virtual-8086 Mode Exceptions")]),t._v(" "),s("p",[t._v("Same exceptions as in Real Address Mode")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("a",{attrs:{href:""}})]),t._v(" "),s("th")])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("#PF(fault-code)")]),t._v(" "),s("td",[t._v("If a page fault occurs.")])]),t._v(" "),s("tr",[s("td",[t._v("#PF(fault-code)")]),t._v(" "),s("td",[t._v("If a page fault occurs.")])])])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Instruction")]),t._v(" "),s("th",[t._v("Latency")]),t._v(" "),s("th",[t._v("Throughput")]),t._v(" "),s("th",[t._v("Execution Unit")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("CPUID")]),t._v(" "),s("td",[t._v("0F3n/0F2n/069n")]),t._v(" "),s("td",[t._v("0F3n/0F2n/069n")]),t._v(" "),s("td",[t._v("0F2n")])]),t._v(" "),s("tr",[s("td",[t._v("MOVD mm, r32")]),t._v(" "),s("td",[t._v("2/2/-")]),t._v(" "),s("td",[t._v("1/1/-")]),t._v(" "),s("td",[t._v("MMX_ALU")])]),t._v(" "),s("tr",[s("td",[t._v("MOVD r32, mm")]),t._v(" "),s("td",[t._v("5/5/-")]),t._v(" "),s("td",[t._v("1/1/-")]),t._v(" "),s("td",[t._v("FP_MISC")])]),t._v(" "),s("tr",[s("td",[t._v("MOVD xmm, r32")]),t._v(" "),s("td",[t._v("6/6/1")]),t._v(" "),s("td",[t._v("2/2/2")]),t._v(" "),s("td",[t._v("MMX_MISC MMX_SHFT")])]),t._v(" "),s("tr",[s("td",[t._v("MOVD r32, xmm")]),t._v(" "),s("td",[t._v("10/10/1+1")]),t._v(" "),s("td",[t._v("1/1/2")]),t._v(" "),s("td",[t._v("FP_MOVE FP_MISC")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);