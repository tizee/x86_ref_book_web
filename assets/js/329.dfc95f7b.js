(window.webpackJsonp=window.webpackJsonp||[]).push([[329],{683:function(t,e,s){"use strict";s.r(e);var a=s(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"verr-verw"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verr-verw"}},[t._v("#")]),t._v(" VERR/VERW")]),t._v(" "),s("h2",{attrs:{id:"verify-a-segment-for-reading-or-writing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#verify-a-segment-for-reading-or-writing"}},[t._v("#")]),t._v(" Verify a Segment for Reading or Writing")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Opcode")]),t._v(" "),s("th",[t._v("Mnemonic")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("0F 00 /4 VERR r/m16")]),t._v(" "),s("td",[t._v("Set ZF=1 if segment specified with r/m16 can be read.")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("0F 00 /5 VERW r/m16")]),t._v(" "),s("td",[t._v("Set ZF=1 if segment specified with r/m16 can be written.")]),t._v(" "),s("td")])])]),t._v(" "),s("h2",{attrs:{id:"description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),s("p",[t._v("Verifies whether the code or data segment specified with the source operand is readable (VERR) or writable (VERW) from the current privilege level (CPL). The source operand is a 16-bit register or a memory location that contains the segment selector for the segment to be verified.")]),t._v(" "),s("p",[t._v("If the segment is accessible and readable (VERR) or writable (VERW), the ZF flag is set; otherwise, the ZF flag is cleared. Code segments are never verified as writable. This check cannot be performed on system segments.")]),t._v(" "),s("p",[t._v("To set the ZF flag, the following conditions must be met:")]),t._v(" "),s("ul",[s("li",[t._v("The segment selector is not null.")]),t._v(" "),s("li",[t._v("The selector must denote a descriptor within the bounds of the descriptor table (GDT or LDT).")]),t._v(" "),s("li",[t._v("The selector must denote the descriptor of a code or data segment (not that of a system segment or gate).")]),t._v(" "),s("li",[t._v("For the VERR instruction, the segment must be readable.")]),t._v(" "),s("li",[t._v("For the VERW instruction, the segment must be a writable data segment.")]),t._v(" "),s("li",[t._v("If the segment is not a conforming code segment, the segment's DPL must be greater than or equal to (have less or the same privilege as) both the CPL and the segment selector's RPL.")])]),t._v(" "),s("p",[t._v("The validation performed is the same as is performed when a segment selector is loaded into the DS, ES, FS, or GS register, and the indicated access (read or write) is performed. The segment selector's value cannot result in a protection exception, enabling the software to anticipate possible segment access problems.")]),t._v(" "),s("h2",{attrs:{id:"operation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#operation"}},[t._v("#")]),t._v(" Operation")]),t._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" GDTR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Limit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" Source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Offset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LDTR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Limit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tZF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tSegmentDescriptor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReadSegmentDescriptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SegmentDescriptor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*system segment*/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsConformingCodeSegment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SegmentDescriptor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CPL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DPL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" RPL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" DPL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ZF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Instruction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" VERR "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsReadable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Segment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Instruction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" VERW "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsWritable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Segment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ZF "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h2",{attrs:{id:"flags-affected"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flags-affected"}},[t._v("#")]),t._v(" Flags affected")]),t._v(" "),s("p",[t._v("The ZF flag is set to 1 if the segment is accessible and readable (VERR) or writable (VERW); otherwise, it is set to 0.")])])}),[],!1,null,null,null);e.default=n.exports}}]);