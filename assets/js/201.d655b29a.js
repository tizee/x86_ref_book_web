(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{555:function(e,t,o){"use strict";o.r(t);var r=o(42),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"movnti"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#movnti"}},[e._v("#")]),e._v(" MOVNTI")]),e._v(" "),o("h2",{attrs:{id:"store-doubleword-using-non-temporal-hint"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#store-doubleword-using-non-temporal-hint"}},[e._v("#")]),e._v(" Store Doubleword Using Non-Temporal Hint")]),e._v(" "),o("table",[o("thead",[o("tr",[o("th",[e._v("Opcode")]),e._v(" "),o("th",[e._v("Mnemonic")]),e._v(" "),o("th",[e._v("Description")])])]),e._v(" "),o("tbody",[o("tr",[o("td",[e._v("0F C3 /r")]),e._v(" "),o("td",[e._v("MOVNTI m32, r32")]),e._v(" "),o("td",[e._v("Move doubleword from r32 to m32 using non-temporal hint.")])])])]),e._v(" "),o("h2",{attrs:{id:"description"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[e._v("#")]),e._v(" Description")]),e._v(" "),o("p",[e._v("Moves the doubleword integer in the source operand (second operand) to the destination operand (first operand) using a non-temporal hint to minimize cache pollution during the write to memory. The source operand is a general-purpose register. The destination operand is a 32-bit memory location.")]),e._v(" "),o("p",[e._v('The non-temporal hint is implemented by using a write combining (WC) memory type protocol when writing the data to memory. Using this protocol, the processor does not write the data into the cache hierarchy, nor does it fetch the corresponding cache line from memory into the cache hierarchy. The memory type of the region being written to can override the non-temporal hint, if the memory address specified for the non-temporal store is in an uncacheable (UC) or write protected (WP) memory region. For more information on non-temporal stores, see "Caching of Temporal vs. Non-Temporal Data" in Chapter 10 in the IA-32 Intel Architecture Software Developer\'s Manual, Volume 1.')]),e._v(" "),o("p",[e._v("Because the WC protocol uses a weakly-ordered memory consistency model, a fencing operation implemented with the SFENCE or MFENCE instruction should be used in conjunction with MOVNTI instructions if multiple processors might use different memory types to read/write the destination memory locations.")]),e._v(" "),o("h2",{attrs:{id:"operation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#operation"}},[e._v("#")]),e._v(" Operation")]),e._v(" "),o("div",{staticClass:"language-c line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-c"}},[o("code",[e._v("Destination "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Source"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br"),o("span",{staticClass:"line-number"},[e._v("2")]),o("br")])]),o("h2",{attrs:{id:"simd-floating-point-exceptions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#simd-floating-point-exceptions"}},[e._v("#")]),e._v(" SIMD Floating-Point Exceptions")]),e._v(" "),o("p",[e._v("None.")]),e._v(" "),o("h2",{attrs:{id:"protected-mode-exceptions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#protected-mode-exceptions"}},[e._v("#")]),e._v(" Protected Mode Exceptions")]),e._v(" "),o("table",[o("thead",[o("tr",[o("th",[o("a",{attrs:{href:""}})]),e._v(" "),o("th")])]),e._v(" "),o("tbody",[o("tr",[o("td",[e._v("#GP(0)")]),e._v(" "),o("td",[e._v("For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.")])]),e._v(" "),o("tr",[o("td",[e._v("#GP(0)")]),e._v(" "),o("td",[e._v("For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.")])]),e._v(" "),o("tr",[o("td",[e._v("#SS(0)")]),e._v(" "),o("td",[e._v("For an illegal address in the SS segment.")])]),e._v(" "),o("tr",[o("td",[e._v("#PF(fault-code)")]),e._v(" "),o("td",[e._v("For a page fault.")])])])]),e._v(" "),o("h2",{attrs:{id:"real-address-mode-exceptions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#real-address-mode-exceptions"}},[e._v("#")]),e._v(" Real-Address Mode Exceptions")]),e._v(" "),o("table",[o("thead",[o("tr",[o("th",[o("a",{attrs:{href:""}})]),e._v(" "),o("th")])]),e._v(" "),o("tbody",[o("tr",[o("td",[e._v("#GP(0)")]),e._v(" "),o("td",[e._v("If a memory operand is not aligned on a 16-byte boundary, regardless of segment. If any part of the operand lies outside the effective address space from 0 to FFFFH.")])]),e._v(" "),o("tr",[o("td",[e._v("#GP(0)")]),e._v(" "),o("td",[e._v("If a memory operand is not aligned on a 16-byte boundary, regardless of segment. If any part of the operand lies outside the effective address space from 0 to FFFFH.")])])])]),e._v(" "),o("h2",{attrs:{id:"virtual-8086-mode-exceptions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#virtual-8086-mode-exceptions"}},[e._v("#")]),e._v(" Virtual-8086 Mode Exceptions")]),e._v(" "),o("p",[e._v("Same exceptions as in Real Address Mode")]),e._v(" "),o("table",[o("thead",[o("tr",[o("th",[o("a",{attrs:{href:""}})]),e._v(" "),o("th")])]),e._v(" "),o("tbody",[o("tr",[o("td",[e._v("#PF(fault-code)")]),e._v(" "),o("td",[e._v("For a page fault.")])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);