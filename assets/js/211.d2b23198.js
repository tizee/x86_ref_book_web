(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{566:function(t,s,e){"use strict";e.r(s);var a=e(42),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"movss"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#movss"}},[t._v("#")]),t._v(" MOVSS")]),t._v(" "),e("h2",{attrs:{id:"move-scalar-single-precision-floating-point-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#move-scalar-single-precision-floating-point-values"}},[t._v("#")]),t._v(" Move Scalar Single-Precision Floating-Point Values")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Opcode")]),t._v(" "),e("th",[t._v("Mnemonic")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("F3 0F 10 /r")]),t._v(" "),e("td",[t._v("MOVSS xmm1, xmm2/m32")]),t._v(" "),e("td",[t._v("Move scalar single-precision floating-point value from xmm2/m32 to xmm1 register.")])]),t._v(" "),e("tr",[e("td",[t._v("F3 0F 11 /r")]),t._v(" "),e("td",[t._v("MOVSS xmm2/m32, xmm1")]),t._v(" "),e("td",[t._v("Move scalar single-precision floating-point value from xmm1 register to xmm2/m32.")])])])]),t._v(" "),e("h2",{attrs:{id:"description"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[t._v("Moves a scalar single-precision floating-point value from the source operand (second operand) to the destination operand (first operand). The source and destination operands can be XMM registers or 32-bit memory locations. This instruction can be used to move a single-precision floating-point value to and from the low doubleword of an XMM register and a 32-bit memory location, or to move a single-precision floating-point value between the low doublewords of two XMM registers. The instruction cannot be used to transfer data between memory locations.")]),t._v(" "),e("p",[t._v("When the source and destination operands are XMM registers, the three high-order doublewords of the destination operand remain unchanged. When the source operand is a memory location and destination operand is an XMM registers, the three high-order doublewords of the destination operand are cleared to all 0s.")]),t._v(" "),e("h2",{attrs:{id:"operation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#operation"}},[t._v("#")]),t._v(" Operation")]),t._v(" "),e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//MOVSS instruction when source and destination operands are XMM registers:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsXMM")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsXMM")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Destination"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Destination"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".31")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".31")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Destination[32..127] remains unchanged")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//MOVSS instruction when source operand is XMM register and destination operand is memory location:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsXMM")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsMemory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Destination"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Destination "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".31")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//MOVSS instruction when source operand is memory location and destination operand is XMM register:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tDestination"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".31")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tDestination"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("32.")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".127")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("h2",{attrs:{id:"simd-floating-point-exceptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simd-floating-point-exceptions"}},[t._v("#")]),t._v(" SIMD Floating-Point Exceptions")]),t._v(" "),e("p",[t._v("None.")]),t._v(" "),e("h2",{attrs:{id:"protected-mode-exceptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#protected-mode-exceptions"}},[t._v("#")]),t._v(" Protected Mode Exceptions")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("a",{attrs:{href:""}})]),t._v(" "),e("th")])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("#GP(0)")]),t._v(" "),e("td",[t._v("For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.")])]),t._v(" "),e("tr",[e("td",[t._v("#GP(0)")]),t._v(" "),e("td",[t._v("For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.")])]),t._v(" "),e("tr",[e("td",[t._v("#SS(0)")]),t._v(" "),e("td",[t._v("For an illegal address in the SS segment.")])]),t._v(" "),e("tr",[e("td",[t._v("#PF(fault-code)")]),t._v(" "),e("td",[t._v("For a page fault.")])]),t._v(" "),e("tr",[e("td",[t._v("#NM")]),t._v(" "),e("td",[t._v("If TS in CR0 is set.")])]),t._v(" "),e("tr",[e("td",[t._v("#UD")]),t._v(" "),e("td",[t._v("If EM in CR0 is set. If OSFXSR in CR4 is 0. If CPUID feature flag SSE is 0.")])])])]),t._v(" "),e("h2",{attrs:{id:"real-address-mode-exceptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#real-address-mode-exceptions"}},[t._v("#")]),t._v(" Real-Address Mode Exceptions")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("a",{attrs:{href:""}})]),t._v(" "),e("th")])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("#GP(0)")]),t._v(" "),e("td",[t._v("If any part of the operand lies outside the effective address space from 0 to FFFFH.")])]),t._v(" "),e("tr",[e("td",[t._v("#GP(0)")]),t._v(" "),e("td",[t._v("If any part of the operand lies outside the effective address space from 0 to FFFFH.")])]),t._v(" "),e("tr",[e("td",[t._v("#NM")]),t._v(" "),e("td",[t._v("If TS in CR0 is set.")])])])]),t._v(" "),e("h2",{attrs:{id:"virtual-8086-mode-exceptions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#virtual-8086-mode-exceptions"}},[t._v("#")]),t._v(" Virtual-8086 Mode Exceptions")]),t._v(" "),e("p",[t._v("Same exceptions as in Real Address Mode")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[e("a",{attrs:{href:""}})]),t._v(" "),e("th")])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("#PF(fault-code)")]),t._v(" "),e("td",[t._v("For a page fault.")])]),t._v(" "),e("tr",[e("td",[t._v("#PF(fault-code)")]),t._v(" "),e("td",[t._v("For a page fault.")])])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Instruction")]),t._v(" "),e("th",[t._v("Latency")]),t._v(" "),e("th",[t._v("Throughput")]),t._v(" "),e("th",[t._v("Execution Unit")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("CPUID")]),t._v(" "),e("td",[t._v("0F3n/0F2n")]),t._v(" "),e("td",[t._v("0F3n/0F2n")]),t._v(" "),e("td",[t._v("0F2n")])]),t._v(" "),e("tr",[e("td",[t._v("MOVSS xmm, xmm")]),t._v(" "),e("td",[t._v("4/4")]),t._v(" "),e("td",[t._v("2/2")]),t._v(" "),e("td",[t._v("MMX_SHFT")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);