(window.webpackJsonp=window.webpackJsonp||[]).push([[330],{684:function(t,e,n){"use strict";n.r(e);var a=n(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"wait-fwait"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wait-fwait"}},[t._v("#")]),t._v(" WAIT/FWAIT")]),t._v(" "),n("h2",{attrs:{id:"wait"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wait"}},[t._v("#")]),t._v(" Wait")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Opcode")]),t._v(" "),n("th",[t._v("Mnemonic")]),t._v(" "),n("th",[t._v("Description")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("9B")]),t._v(" "),n("td",[t._v("WAIT")]),t._v(" "),n("td",[t._v("Check pending unmasked floating-point exceptions.")])]),t._v(" "),n("tr",[n("td",[t._v("9B")]),t._v(" "),n("td",[t._v("FWAIT")]),t._v(" "),n("td",[t._v("Check pending unmasked floating-point exceptions.")])])])]),t._v(" "),n("h2",{attrs:{id:"description"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),n("p",[t._v("Causes the processor to check for and handle pending, unmasked, floating-point exceptions before proceeding. (FWAIT is an alternate mnemonic for WAIT.) This instruction is useful for synchronizing exceptions in critical sections of code. Coding a WAIT instruction after a floating-point instruction insures that any unmasked floating-point exceptions the instruction may raise are handled before the processor can modify the instruction's results. See the section titled \"Floating-Point Exception Synchronization\" in Chapter 8 of the IA-32 Intel Architecture Software Developer's Manual, Volume 1, for more information on using the WAIT/FWAIT instruction.")]),t._v(" "),n("h2",{attrs:{id:"operation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#operation"}},[t._v("#")]),t._v(" Operation")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("CheckForPendingUnmaskedFloatingPointExceptions")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("h2",{attrs:{id:"fpu-flags-affected"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fpu-flags-affected"}},[t._v("#")]),t._v(" FPU flags affected")]),t._v(" "),n("p",[t._v("The C0, C1, C2, and C3 flags are undefined.")])])}),[],!1,null,null,null);e.default=s.exports}}]);