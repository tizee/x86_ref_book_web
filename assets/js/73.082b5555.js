(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{426:function(t,e,n){"use strict";n.r(e);var a=n(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"cvttps2pi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cvttps2pi"}},[t._v("#")]),t._v(" CVTTPS2PI")]),t._v(" "),n("h2",{attrs:{id:"convert-with-truncation-packed-single-precision-floating-point-values-to-packed-doubleword-integers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#convert-with-truncation-packed-single-precision-floating-point-values-to-packed-doubleword-integers"}},[t._v("#")]),t._v(" Convert with Truncation Packed Single-Precision Floating-Point Values to Packed Doubleword Integers")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Opcode")]),t._v(" "),n("th",[t._v("Mnemonic")]),t._v(" "),n("th",[t._v("Description")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("0F 2C /r")]),t._v(" "),n("td",[t._v("CVTTPS2PI mm, xmm/m64")]),t._v(" "),n("td",[t._v("Convert two single-precision floating-point values from xmm/m64 to two signed doubleword signed integers in mm using truncation.")])])])]),t._v(" "),n("h2",{attrs:{id:"description"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),n("p",[t._v("Converts two packed single-precision floating-point values in the source operand (second operand) to two packed signed doubleword integers in the destination operand (first operand).")]),t._v(" "),n("p",[t._v("The source operand can be an XMM register or a 64-bit memory location. The destination operand is an MMX technology register. When the source operand is an XMM register, the two single-precision floating-point values are contained in the low quadword of the register.")]),t._v(" "),n("p",[t._v("When a conversion is inexact, a truncated (round toward zero) result is returned. If a converted result is larger than the maximum signed doubleword integer, the floating-point invalid exception is raised, and if this exception is masked, the indefinite integer value (80000000H) is returned.")]),t._v(" "),n("p",[t._v("This instruction causes a transition from x87 FPU to MMX technology operation (that is, the x87 FPU top-of-stack pointer is set to 0 and the x87 FPU tag word is set to all 0s [valid]). If this instruction is executed while an x87 FPU floating-point exception is pending, the exception is handled before the CVTTPS2PI instruction is executed.")]),t._v(" "),n("h2",{attrs:{id:"operation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#operation"}},[t._v("#")]),t._v(" Operation")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("Destination"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".31")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConvertFloatToIntegerTruncate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".31")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nDestination"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("32.")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".63")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ConvertFloatToIntegerTruncate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("32.")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".63")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("h2",{attrs:{id:"simd-floating-point-exceptions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simd-floating-point-exceptions"}},[t._v("#")]),t._v(" SIMD Floating-Point Exceptions")]),t._v(" "),n("p",[t._v("Invalid, Precision.")]),t._v(" "),n("h2",{attrs:{id:"protected-mode-exceptions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#protected-mode-exceptions"}},[t._v("#")]),t._v(" Protected Mode Exceptions")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("a",{attrs:{href:""}})]),t._v(" "),n("th")])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("#GP(0)")]),t._v(" "),n("td",[t._v("For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.")])]),t._v(" "),n("tr",[n("td",[t._v("#GP(0)")]),t._v(" "),n("td",[t._v("For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.")])]),t._v(" "),n("tr",[n("td",[t._v("#SS(0)")]),t._v(" "),n("td",[t._v("For an illegal address in the SS segment.")])]),t._v(" "),n("tr",[n("td",[t._v("#PF(fault-code)")]),t._v(" "),n("td",[t._v("For a page fault.")])]),t._v(" "),n("tr",[n("td",[t._v("#MF")]),t._v(" "),n("td",[t._v("If there is a pending x87 FPU exception.")])]),t._v(" "),n("tr",[n("td",[t._v("#NM")]),t._v(" "),n("td",[t._v("If TS in CR0 is set.")])]),t._v(" "),n("tr",[n("td",[t._v("#XM")]),t._v(" "),n("td",[t._v("If an unmasked SIMD floating-point exception and OSXMMEXCPT in CR4 is 1.")])]),t._v(" "),n("tr",[n("td",[t._v("#UD")]),t._v(" "),n("td",[t._v("If an unmasked SIMD floating-point exception and OSXMMEXCPT in CR4 is 0. If EM in CR0 is set. If OSFXSR in CR4 is 0. If CPUID feature flag SSE is 0.")])])])]),t._v(" "),n("h2",{attrs:{id:"real-address-mode-exceptions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#real-address-mode-exceptions"}},[t._v("#")]),t._v(" Real-Address Mode Exceptions")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("a",{attrs:{href:""}})]),t._v(" "),n("th")])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("GP(0)")]),t._v(" "),n("td",[t._v("If any part of the operand lies outside the effective address space from 0 to FFFFH.")])]),t._v(" "),n("tr",[n("td",[t._v("GP(0)")]),t._v(" "),n("td",[t._v("If any part of the operand lies outside the effective address space from 0 to FFFFH.")])]),t._v(" "),n("tr",[n("td",[t._v("#NM")]),t._v(" "),n("td",[t._v("If TS in CR0 is set.")])]),t._v(" "),n("tr",[n("td",[t._v("#MF")]),t._v(" "),n("td",[t._v("If there is a pending x87 FPU exception.")])]),t._v(" "),n("tr",[n("td",[t._v("#XM")]),t._v(" "),n("td",[t._v("If an unmasked SIMD floating-point exception and OSXMMEXCPT in CR4 is 1.")])])])]),t._v(" "),n("h2",{attrs:{id:"virtual-8086-mode-exceptions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#virtual-8086-mode-exceptions"}},[t._v("#")]),t._v(" Virtual-8086 Mode Exceptions")]),t._v(" "),n("p",[t._v("Same exceptions as in Real Address Mode")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[n("a",{attrs:{href:""}})]),t._v(" "),n("th")])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("#PF(fault-code)")]),t._v(" "),n("td",[t._v("For a page fault.")])]),t._v(" "),n("tr",[n("td",[t._v("#PF(fault-code)")]),t._v(" "),n("td",[t._v("For a page fault.")])])])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("Instruction")]),t._v(" "),n("th",[t._v("Latency")]),t._v(" "),n("th",[t._v("Throughput")]),t._v(" "),n("th",[t._v("Execution Unit")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("CPUID")]),t._v(" "),n("td",[t._v("0F3n/0F2n/069n")]),t._v(" "),n("td",[t._v("0F3n/0F2n/069n")]),t._v(" "),n("td",[t._v("0F2n")])]),t._v(" "),n("tr",[n("td",[t._v("CVTTPS2PI mm, xmm")]),t._v(" "),n("td",[t._v("8/7/3")]),t._v(" "),n("td",[t._v("2/2/1")]),t._v(" "),n("td",[t._v("FP_ADD MMX_ALU")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);