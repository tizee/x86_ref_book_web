(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{521:function(e,t,s){"use strict";s.r(t);var i=s(42),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lock"}},[e._v("#")]),e._v(" LOCK")]),e._v(" "),s("h2",{attrs:{id:"assert-lock-signal-prefix"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assert-lock-signal-prefix"}},[e._v("#")]),e._v(" Assert LOCK# Signal Prefix")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Opcode")]),e._v(" "),s("th",[e._v("Mnemonic")]),e._v(" "),s("th",[e._v("Description")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("F0")]),e._v(" "),s("td",[e._v("LOCK")]),e._v(" "),s("td",[e._v("Asserts LOCK# signal for duration of the accompanying")])])])]),e._v(" "),s("h2",{attrs:{id:"description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[e._v("#")]),e._v(" Description")]),e._v(" "),s("p",[e._v("Causes the processor's LOCK# signal to be asserted during execution of the accompanying instruction (turns the instruction into an atomic instruction). In a multiprocessor environment, the LOCK# signal insures that the processor has exclusive use of any shared memory while the signal is asserted.")]),e._v(" "),s("p",[e._v("Note that in later IA-32 processors (including the Pentium 4, Intel Xeon, and P6 family processors), locking may occur without the LOCK# signal being asserted. See IA-32 Architecture Compatibility below.")]),e._v(" "),s("p",[e._v("The LOCK prefix can be prepended only to the following instructions and only to those forms of the instructions where the destination operand is a memory operand: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG. If the LOCK prefix is used with one of these instructions and the source operand is a memory operand, an undefined opcode exception (#UD) may be generated. An undefined opcode exception will also be generated if the LOCK prefix is used with any instruction not in the above list. The XCHG instruction always asserts the LOCK# signal regardless of the presence or absence of the LOCK prefix.")]),e._v(" "),s("p",[e._v("The LOCK prefix is typically used with the BTS instruction to perform a read-modify-write operation on a memory location in shared memory environment.")]),e._v(" "),s("p",[e._v("The integrity of the LOCK prefix is not affected by the alignment of the memory field. Memory locking is observed for arbitrarily misaligned fields.")]),e._v(" "),s("h2",{attrs:{id:"operation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#operation"}},[e._v("#")]),e._v(" Operation")]),e._v(" "),s("div",{staticClass:"language-c line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("AssertLOCK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("DurationOfAccompaningInstruction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"flags-affected"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flags-affected"}},[e._v("#")]),e._v(" Flags affected")]),e._v(" "),s("p",[e._v("None.\ninstruction.")]),e._v(" "),s("h2",{attrs:{id:"ia-32-architecture-compatibility"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ia-32-architecture-compatibility"}},[e._v("#")]),e._v(" IA-32 Architecture Compatibility")]),e._v(" "),s("p",[e._v("Beginning with the P6 family processors, when the LOCK prefix is prefixed to an instruction and the memory area being accessed is cached internally in the processor, the LOCK# signal is generally not asserted. Instead, only the processor's cache is locked. Here, the processor's cache coherency mechanism insures that the operation is carried out atomically with regards to memory. See \"Effects of a Locked Operation on Internal Processor Caches\" in Chapter 7 of IA- 32 Intel Architecture Software Developer's Manual, Volume 3, the for more information on locking of caches.")]),e._v(" "),s("h2",{attrs:{id:"protected-mode-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protected-mode-exceptions"}},[e._v("#")]),e._v(" Protected Mode Exceptions")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("a",{attrs:{href:""}})]),e._v(" "),s("th")])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("#UD")]),e._v(" "),s("td",[e._v('If the LOCK prefix is used with an instruction not listed in the "{description}" section above. Other exceptions can be generated by the instruction that the LOCK prefix is being applied to.')])])])]),e._v(" "),s("h2",{attrs:{id:"real-address-mode-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#real-address-mode-exceptions"}},[e._v("#")]),e._v(" Real-Address Mode Exceptions")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("a",{attrs:{href:""}})]),e._v(" "),s("th")])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("#UD")]),e._v(" "),s("td",[e._v('If the LOCK prefix is used with an instruction not listed in the "{description}" section above. Other exceptions can be generated by the instruction that the LOCK prefix is being applied to.')])])])]),e._v(" "),s("h2",{attrs:{id:"virtual-8086-mode-exceptions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#virtual-8086-mode-exceptions"}},[e._v("#")]),e._v(" Virtual-8086 Mode Exceptions")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("a",{attrs:{href:""}})]),e._v(" "),s("th")])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("#UD")]),e._v(" "),s("td",[e._v('If the LOCK prefix is used with an instruction not listed in the "{description}" section above. Other exceptions can be generated by the instruction that the LOCK prefix is being applied to.')])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);